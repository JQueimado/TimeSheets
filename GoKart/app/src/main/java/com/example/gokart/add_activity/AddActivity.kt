package com.example.gokart.add_activity

import android.annotation.SuppressLint
import android.os.Bundle
import android.text.format.DateFormat
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.fragment.app.FragmentContainerView
import androidx.fragment.app.commit
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.gokart.R
import com.example.gokart.data_converters.toIntTimeSheet
import com.example.gokart.data_converters.toTextTimeStamp
import com.example.gokart.database.entity.*
import java.util.*
import kotlin.collections.ArrayList

class AddActivity : AppCompatActivity(resourceValue){

    //Constants
    companion object{
        //Resources
        private const val resourceValue = R.layout.activity_add
        //Components
        private const val pickerFragmentPlacerId = R.id.picker_fragment
        private const val addLapsLayoutId = R.id.add_laps_layout
        private const val addLapsCounterId = R.id.add_laps_counter
        private const val navBackButtonId = R.id.nav_back_button
        private const val datePickerButtonId = R.id.date_picker_button
        private const val pickKartingCenterButtonId = R.id.pick_kart_center_button
        private const val pickKartButtonId = R.id.pick_kart_button
        private const val addLapsButtonId = R.id.add_lap_button
        private const val doneButtonId = R.id.add_conclude_button
    }

    //ViewModels
    private val addActivityKartingCenterViewModel:
        AddActivityKartingCenterViewModel by viewModels()
    private val addActivityKartViewModel:
        AddActivityKartViewModel by viewModels()
    private val addActivityTimeSheetViewModel:
        AddActivityTimeSheetViewModel by viewModels()
    private val dataVM:
        AddActivityDataViewModel by viewModels()

    //Fragments
    private var placerID = R.id.picker_fragment
    private val datePicker : DatePickerFragment = DatePickerFragment(this)
    private val timePicker : TimePickerFragment = TimePickerFragment(this)
    private lateinit var kartPicker : PickerFragment
    private lateinit var kartingCenterPicker : PickerFragment
    private lateinit var addKartFragment : AddKartFragment
    private lateinit var addKartingCenterFragment: AddKartingCenterFragment

    //Date Values
    private var date : Date = Date()
    private var year : Int = 0
    private var month : Int = 0
    private var day : Int = 0

    //UI
    private lateinit var choseDateButton : Button
    private lateinit var choseKartButton: Button
    private lateinit var choseKartingCenterButton: Button
    private lateinit var doneButton: Button
    private lateinit var backButton: Button
    private lateinit var lapListLayout: RecyclerView

    //Recycler view
    private lateinit var recyclerViewAdapter: LapRVAdapter
    private lateinit var layoutManager: LinearLayoutManager

    ///////////////////////////////////////////////////////////////////////////////////// Selectors
    /* Action for on select date */
    fun onDatePick( year: Int, month : Int, day: Int){
        this.year = year
        this.month = month
        this.day = day

        timePicker.show(supportFragmentManager, "TimePicker")
    }

    /* PopsUp after date selection */
    fun onTimePick( hour : Int, minute : Int ){
        Date( year - 1900, month, day, hour, minute ).also { date = it }
        choseDateButton.text = date.toReqFormat()
    }

    /* Result for Picking a kart */
    fun onPickKartConfirm(item : Int){
        supportFragmentManager.popBackStack()
        if( item != -1 ) {
            choseKartButton.text = dataVM.kartList!![item]
            //kartList is generated by karts so is safe to assume they are in the same order
            dataVM.kart = dataVM.kartingCenter!!.karts[item]
        } else {
            choseKartButton.text = resources.getString(R.string.add_pick_kart)
            dataVM.kart = null
        }
    }

    /* Result for Picking a Karting Center */
    fun onPickKartingCenterConfirm(name : String){
        supportFragmentManager.popBackStack()
        if(name.isEmpty()) {
            choseKartButton.isEnabled = false
            choseKartingCenterButton.text = resources.getString(R.string.add_pick_kart_center)
            choseKartButton.text = resources.getString(R.string.add_pick_kart)
            dataVM.kartingCenter = null
        }else{
            //If nothing changes nothing happens
            if( dataVM.kartingCenter != null && dataVM.kartingCenter!!.kartingCenterEntity.name == name )
                return

            choseKartButton.isEnabled = true //Enables kart search
            choseKartingCenterButton.text = name
            choseKartButton.text = resources.getString(R.string.add_pick_kart)

            //Observer is here because it needs to be updated with the name on karting center pick
            addActivityKartingCenterViewModel.getOneByName(name).observe(this, {
                dataVM.kartingCenter = it //Update karting center

                //update karts
                dataVM.kartList = ArrayList()
                if( dataVM.kartingCenter != null ) { //just in case
                    for (kartEntity in dataVM.kartingCenter!!.karts) {
                        dataVM.kartList!!.add(
                            if (kartEntity.name.isEmpty())
                                "${kartEntity.number}-${kartEntity.displacement}cc"
                            else
                                kartEntity.name
                        )
                    }
                    kartPicker.setData(dataVM.kartList!!)
                }
            })

        }
    }

    /* Kart Add Control */
    //Start fragment
    fun onOpenAddKart(){
        supportFragmentManager.commit {
            replace(placerID, addKartFragment)
            setReorderingAllowed(true)
            addToBackStack(null)
        }
    }

    //End fragment with result
    fun onAddKartConclude( kartEntity: KartEntity ){
        addActivityKartViewModel.insert(kartEntity)
        onCloseAddKart()
    }

    //End fragment without result
    fun onCloseAddKart(){
        supportFragmentManager.popBackStack()
    }

    /* Karting Center Add Control */
    //Start Fragment
    fun onOpenAddKartingCenter(){
        supportFragmentManager.commit {
            replace( placerID, addKartingCenterFragment)
            setReorderingAllowed(true)
            addToBackStack(null)
        }
    }

    //End fragment with result
    fun onAddKartingCenterConclude( kartingCenterEntity: KartingCenterEntity ){
        addActivityKartingCenterViewModel.insert(kartingCenterEntity)
        //Close Fragment
        onCloseAddKartingCenter()
    }

    //End fragment without result
    fun onCloseAddKartingCenter(){
        supportFragmentManager.popBackStack()
    }

    //////////////////////////////////////////////////////////////////////////// Activity Functions
    /* Activity onCreate */
    @SuppressLint("SetTextI18n")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        /* Create Fragments */
        //Kart fragment
        kartPicker = PickerFragment(this, dataVM.kartList!!, PickerFragment.KART_MODE)

        //Karting Center Fragment
        kartingCenterPicker = PickerFragment(
            this,
            dataVM.kartingCenterList!!,
            PickerFragment.KARTING_CENTER_MODE
        )

        //Add kart fragment
        addKartFragment = AddKartFragment(this)

        //Adding kart center fragment
        addKartingCenterFragment = AddKartingCenterFragment(this)

        //Setup fragment placer
        val pickerFragmentPlacer = findViewById<FragmentContainerView>(pickerFragmentPlacerId)
        pickerFragmentPlacer.visibility = View.VISIBLE

        /* Data observers */
        //Karting center observer
        addActivityKartingCenterViewModel.getAllNames().observe(this, {
            kartingCenterPicker.setData(it)
        })

        //Back button
        backButton = findViewById(navBackButtonId)
        backButton.setOnClickListener {
            finish() //Kills activity
        }

        //Date picker
        choseDateButton = findViewById(datePickerButtonId)
        choseDateButton.text = date.toReqFormat() //Set date to Date.now
        choseDateButton.setOnClickListener {
            datePicker.show(supportFragmentManager, "date_picker")
        }

        //Pick karting center
        choseKartingCenterButton = findViewById(pickKartingCenterButtonId)
        choseKartingCenterButton.setOnClickListener {
            supportFragmentManager.commit {
                replace(placerID, kartingCenterPicker )
                setReorderingAllowed(true)
                addToBackStack(null)
            }
        }

        //Pick kart
        choseKartButton = findViewById(pickKartButtonId)
        choseKartButton.isEnabled = false //Disable
        choseKartButton.setOnClickListener {
            supportFragmentManager.commit {
                replace(placerID, kartPicker)
                setReorderingAllowed(true)
                addToBackStack(null)
            }
        }

        //Add lap list
        lapListLayout = findViewById(addLapsLayoutId)
        recyclerViewAdapter = LapRVAdapter( ArrayList(), this )
        layoutManager = LinearLayoutManager(applicationContext)

        lapListLayout.adapter = recyclerViewAdapter
        lapListLayout.layoutManager = layoutManager

        //SetData
        recyclerViewAdapter.setData(dataVM.get())

        //Add lap button
        val addLapsButton = findViewById<ConstraintLayout>(addLapsButtonId)
        val lapCountTextView = findViewById<TextView>(addLapsCounterId)
        val lapCountString = resources.getText(R.string.add_list_title).toString()

        lapCountTextView.text =
            lapCountString +
            "${dataVM.size()}"

        addLapsButton.setOnClickListener {
            //Lap Views
            val text = ""
            dataVM.add(text)
            recyclerViewAdapter.setData(dataVM.get())

            //LapCounter
            lapCountTextView.text =
                lapCountString +
                "${dataVM.size()}"
        }

        //Done Button
        doneButton = findViewById(doneButtonId)
        doneButton.setOnClickListener{

            //values and variables
            val lapsValue = arrayListOf<Int>()
            val lapsText = arrayListOf<String>()

            //Verification and lap conversion
            try{
                //karting Center
                if (dataVM.kartingCenter == null)
                    throw Exception( "Invalid Karting Center" )

                //kart
                if( dataVM.kart == null )
                    throw Exception( "Invalid Kart" )

                //laps
                val laps = dataVM.get()

                if( laps.size == 0 )
                    throw Exception("Laps required")

                for ( lapRaw in laps ){

                    if(lapRaw.isBlank() )
                        throw Exception("Lap with no value")

                    val lap = lapRaw.toTextTimeStamp()
                    lapsValue.add( lap.toIntTimeSheet() )
                    lapsText.add( lap )
                }

            }catch (e: Exception ){
                Toast.makeText(applicationContext, e.message, Toast.LENGTH_LONG).show()
                Log.e("time Sheet verification", e.stackTraceToString())
                return@setOnClickListener
            }

            //Assemble data structures and insert into database
            addActivityTimeSheetViewModel.insert(
                kartingCenterEntity = dataVM.kartingCenter!!.kartingCenterEntity,
                kartEntity = dataVM.kart!!,
                date = date,
                lapsValue = lapsValue,
                lapsText = lapsText,
                activity = this
            )

            finish()
        }
    }

    //Returns Selected karting center id if exists
    fun getKartingCenterID() : Long{
        return if( dataVM.kartingCenter != null )
            dataVM.kartingCenter!!.kartingCenterEntity.kartingCenterId
        else
            -1
    }

    //////////////////////////////////////////////////////////////////////////////////////// Extras
    //Returns a string that corresponds to the required date format
    private fun Date.toReqFormat(): String{
        return DateFormat.format("dd/MM/yyyy hh:mm", this).toString()
    }
}